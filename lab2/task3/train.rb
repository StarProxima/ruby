# Паттерн "Шаблон" (Template) - это поведенческий паттерн проектирования, который определяет скелет алгоритма в суперклассе,
#  оставляя определение некоторых шагов подклассам. Шаблонный метод позволяет подклассам переопределять
#  отдельные шаги алгоритма, не меняя его общей структуры.

# Рассмотрим простой пример использования паттерна "Шаблон" на языке Ruby.
#  Допустим, у нас есть абстрактный класс "Базовый класс поезда" (BaseTrain),
#  который представляет общую структуру для всех типов поездов. У нас также есть два подкласса:
#  "Пассажирский поезд" (PassengerTrain) и "Грузовой поезд" (FreightTrain).

# Класс "Базовый класс поезда" определяет шаблонный метод "ride", который представляет собой алгоритм перемещения поезда:

class BaseTrain
  def ride
    start_engine
    go
    stop
    park
  end

  def start_engine
    puts "Заводим двигатель"
  end

  def go
    raise NotImplementedError, "Метод не реализован"
  end

  def stop
    puts "Останавливаем поезд"
  end

  def park
    puts "Припарковали поезд"
  end
end

# Класс "Пассажирский поезд" переопределяет метод "go", чтобы адаптировать его к своим потребностям:

class PassengerTrain < BaseTrain
  def go
    puts "Отправляемся в путь с пассажирами на борту"
  end
end

# Класс "Грузовой поезд" также переопределяет метод "go", чтобы адаптировать его к своим потребностям:


class FreightTrain < BaseTrain
  def go
    puts "Отправляемся в путь с грузом на борту"
  end
end

# Теперь мы можем создать экземпляры обоих типов поездов и вызвать метод "ride", чтобы убедиться,
#  что алгоритм перемещения поездов правильно работает:

passenger_train = PassengerTrain.new
passenger_train.ride
# Вывод:
# Заводим двигатель
# Отправляемся в путь с пассажирами на борту
# Останавливаем поезд
# Припарковали поезд

freight_train = FreightTrain.new
freight_train.ride
# Вывод:
# Заводим двигатель
# Отправляемся в путь с грузом на борту
# Останавливаем поезд